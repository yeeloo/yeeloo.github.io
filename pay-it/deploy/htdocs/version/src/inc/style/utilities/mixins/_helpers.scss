/**
 * Font Face
 * @param {string} $fontName - Name of the font
 * @param {string} $folderName - Subfolder inside the fonts folder
 * @param {string} $fileName - Name of the font-file
 * @param {string} $fontWeight (normal) - Font weight value
 * @param {string} $fontStyle (normal) - Font style value
 */
@mixin font-face($fontName, $folderName, $fileName, $fontWeight: normal, $fontStyle: normal) {
	@font-face {
		font-family: $fontName;
		src: url('#{$pathFont}#{$folderName}/#{$fileName}.eot');
		src: url('#{$pathFont}#{$folderName}/#{$fileName}.eot?#iefix') format('embedded-opentype'),
		url('#{$pathFont}#{$folderName}/#{$fileName}.woff') format('woff'),
		url('#{$pathFont}#{$folderName}/#{$fileName}.ttf') format('truetype'),
		url('#{$pathFont}#{$folderName}/#{$fileName}.svg##{$fontName}') format('svg');
		font-weight: $fontWeight;
		font-style: $fontStyle;
	}
}

/**
 * Aspect ratio, create a :before pseudo element for setting an aspect ratio on an element
 * @param {number} $width (1) - Percentage width
 * @param {number} $height ($width) - Percentage height
 * @param {boolean} $relative (true) - Add relative position to element
 */
@mixin aspect-ratio($width: 1, $height: $width, $relative: true) {
	@if $relative == true {
		position: relative;
	}

	&:before {
		content: '';
		display: block;
		padding-top: ($height / $width) * 100%;
	}
}

/**
 * CSS Background
 * @param {string} $name ($spriteDefault) - Background image, without the image path
 * @param {string} $repeat (no-repeat) - Background repeat
 * @param {position} $left (0) - Background position X
 * @param {position} $top (0) - Background position Y
 * @param {color} $color (transparent) - Background color
 * @param {string} $attachment (scorll) - Background attachment
 */
@mixin background($name: $spriteDefault, $repeat: no-repeat, $left: 0, $top: 0, $color: transparent, $attachment: scroll) {
	background: $color url('#{$pathImage}#{$name}') $repeat $left $top $attachment;
}

// Text overflow, Requires inline-block or block for proper styling
@mixin text-overflow {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Disable the use of Ligatures in browsers
@mixin no-ligatures {
	font-variant-ligatures: no-common-ligatures;
	font-feature-settings: "liga" 0;
}

/**
 * Creates an arrow
 * @param {string} $direction (up) - Arrow direction: up, down, left or right
 * @param {color} $color (#000) - Arrow color
 * @param {size} $size (10px) - Size of the opposite side of the arrow
 * @param {number} $stretch (1) - Amount of the stretch of the arrow
 * @param {boolean} $exclude-base (false) - Remove the default arrow styling (usefull if you want to modify the direction of the arrow on rollover
 */
@mixin arrow($direction: up, $color: #000, $size: 10px, $stretch: 1, $excludeBase: false) {

	@if $excludeBase == false {
		display: inline-block;
		vertical-align: middle;
		width: 0;
		height: 0;
		font: 0/0 serif;
	}

	$size: round($size / 2);
	$longSize: $size * $stretch;

	@if $direction == down {
		border-top: $longSize solid #{$color};
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: 0;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-left: 0;
		border-right: $longSize solid #{$color};
		border-bottom: $size solid transparent;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-left: $longSize solid #{$color};
		border-right: 0;
		border-bottom: $size solid transparent;
	} @else {
		border-top: 0;
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $longSize solid #{$color};
	}

}
